@using ApexCharts
@using static Lproj.Types

@inherits TrainUI_Menu
@using TData = Tuple<int, Tuple<double, double>>

<div class="train-ui border">
    @Menu()
    @* <div class="train-chart border"> *@
    @*     <ApexChart TItem="TData" Width="ContainerFit" Height="ContainerFit"> *@
    @*         @Series("Self Play Reward In First Position", e => (decimal)e.Item2.Item1) *@
    @*         @Series("Self Play Reward In Last Position", e => (decimal)e.Item2.Item2) *@
    @*     </ApexChart> *@
    @* </div> *@
    <TableUI Model="M.training_model"
             IsTrain="true"/>
</div>

@code {
    // So the table is messing up the UI. It seems it really hates the updates after it gets filled.
    // What about when we only have the chart?

    // The chart is not updating.
    // Let's forget the chart for the time being.

    // We need to understand what is going on with the table.

    RenderFragment Series(string name, Func<TData,decimal?> yValue)
    {
        return @<ApexPointSeries TItem="TData"
                                 SeriesType="SeriesType.Line"
                                 OrderBy="e => e.X"
                                 Items="Model.cfr_players[Model.active_cfr_player].training_results"
                                 XValue="@(e => e.Item1)"

                                 Name="@name"
                                 YValue="@yValue"/>;
    }

    private RenderFragment Menu()
    {
        var m = M;
        return CreateMenu(
            Model.active_cfr_player,
            m.training_run_iterations,
            m.training_iterations_left,
            "Training",
            (x => Dispatch(MsgClient.NewCFRPlayerSelected(x.Value!.ToString()))),
            (_ => Dispatch(MsgClient.TrainingStartClicked)),
            (x => Dispatch(MsgClient.NewTrainingInputIterationsChanged(x.Value!.ToString())))
            );
    }
}
