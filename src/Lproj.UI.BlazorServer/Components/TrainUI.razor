@using ApexCharts
@using System.Timers
@using static Lproj.Types


@inherits TrainUI_Menu
@implements IDisposable

@using TData = Tuple<int, Tuple<double, double>>

<div class="train-ui border">
    @Menu()
    <div class="train-chart border">
        <ApexChart @ref="_chart" TItem="TData" Width="ContainerFit" Height="ContainerFit">
            @Series("Self Play Reward In First Position", e => (decimal)e.Item2.Item1)
            @Series("Self Play Reward In Last Position", e => (decimal)e.Item2.Item2)
        </ApexChart>
    </div>
    <TableUI Model="M.training_model"
             IsTrain="true"/>
</div>

@code {
    private ApexChart<TData>? _chart;

    private Timer? _timer;
    private object? _oldPlayers;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer(TimeSpan.FromSeconds(2));
            _timer.Elapsed += async delegate
            {
                if (_chart != null && !ReferenceEquals(Model.cfr_players, _oldPlayers))
                {
                    _oldPlayers = Model.cfr_players;
                    await _chart.UpdateSeriesAsync();
                }
            };
            _timer.Start();
        }
    }

    // Remember what I said, about not bildingly copying what you see out there?
    // I am not sure if just having a bare dispose method will do what we want.
    void IDisposable.Dispose()
    {
        _timer?.Dispose();
    }

    RenderFragment Series(string name, Func<TData,decimal?> yValue)
    {
        return @<ApexPointSeries TItem="TData"
                                 SeriesType="SeriesType.Line"
                                 OrderBy="e => e.X"
                                 Items="Model.cfr_players[Model.active_cfr_player].training_results"
                                 XValue="@(e => e.Item1)"

                                 Name="@name"
                                 YValue="@yValue"/>;
    }

    private RenderFragment Menu()
    {
        var m = M;
        return CreateMenu(
            Model.active_cfr_player,
            m.training_run_iterations,
            m.training_iterations_left,
            "Training",
            (x => Dispatch(MsgClient.NewCFRPlayerSelected(x.Value!.ToString()))),
            (_ => Dispatch(MsgClient.TrainingStartClicked)),
            (x => Dispatch(MsgClient.NewTrainingInputIterationsChanged(x.Value!.ToString())))
            );
    }
}