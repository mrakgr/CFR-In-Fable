@using static Types
@using static Types.Action
@using static Types.AllowedActions
@using Microsoft.FSharp.Core

<div class="game-ui border">
    <div class="game-ui-background">
        @(Background(Model.p1_id))
        @(Background(Model.p0_id))
    </div>
    <div class="top">
        <div class="top-left">
            <div class="id-pot">
                @Id(Model.p1_id)
                @Pot(Model.p1_pot)
            </div>
        </div>
        <div class="top-middle">
            @Card(Model.p1_card)
        </div>
        <div class="top-right"></div>
    </div>

    <div class="middle">
        @Card(Model.community_card)
        @PadderMiddle(1)
        @Pot(Model.p0_pot + Model.p1_pot)
    </div>

    <div class="bottom">
        <div class="bottom-left">
            <div class="id-pot">
                @Id(Model.p0_id)
                @Pot(Model.p0_pot)
            </div>
        </div>
        <div class="bottom-middle">
            @Card(Model.p0_card)
        </div>
        <div class="bottom-right">
            @Button(Fold)
            @Button(Call)
            @Button(Raise)
        </div>
    </div>
</div>

@code {
    [Parameter] [EditorRequired]
    public required LeducModel Model { get; set; }

    [Parameter] [EditorRequired]
    public required AllowedActions AllowedActions { get; set; }

    [Parameter] [EditorRequired]
    public required Action<MsgClient> Dispatch { get; set; }

    private static RenderFragment Background(int id)
    {
        return @<p class="@(id == 0 ? "bg-red" : "bg-green")">
                   @names[id]
               </p>;
    }

    private static RenderFragment Pot(int size)
    {
        return @<div class="pot-size"> @size </div>;
    }

    private static RenderFragment Id(int id)
    {
        return @<div class="id"> @names[id] </div>;
    }

    private static RenderFragment PadderMiddle(float x)
    {
        // Yeah, the css class does not exist.
        return @<div class="middle-padder"
                     style="flex-basis: @(x)em">
               </div>;
    }

    private static RenderFragment Card(FSharpOption<Card> x)
    {
        return @<div class="card">
                   <strong>
                       @card(x)
                   </strong>
               </div>;
    }

    private RenderFragment Button(Types.Action a)
    {
        return @<button class="action"
                     disabled="@(!IsAllowed(AllowedActions, a))"
                     @onclick="() => Dispatch(MsgClient.NewClickedOn(a))">
                   @a
               </button>;
    }

}