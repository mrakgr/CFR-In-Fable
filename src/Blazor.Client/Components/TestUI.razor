@using static Blazor.Client.Fun

<div class="train-ui border">

    @Menu()
    <div class="train-chart border">
        The chart should go here.
    </div>
    <TableUI Model="M.testing_model"
             IsTrain="false"/>
</div>

@code {
    // TODO: Don't forget the chart.

    private RenderFragment Menu()
    {
        var m = M;
        return CreateMenu(
            Model.active_cfr_player,
            m.testing_run_iterations,
            m.testing_iterations_left,
            "Testing",
            (x => Dispatch(MsgClient.NewCFRPlayerSelected(x.Value!.ToString()))),
            (_ => Dispatch(MsgClient.TestingStartClicked)),
            (x => Dispatch(MsgClient.NewTestingInputIterationsChanged(x.Value!.ToString())))
            );
    }

    // Note: https://github.com/dotnet/aspnetcore/issues/48496
    // The reason this is copy pasted is because Blazor's component inheritance is literally broken.

    [Parameter] [EditorRequired]
    public required ClientModel Model { get; set; }

    [Parameter] [EditorRequired]
    public required Action<MsgClient> Dispatch { get; set; }

    protected UICFRPlayerModel M => Model.cfr_players[Model.active_cfr_player];

    protected RenderFragment CreateMenu(
        CFRPlayerType cfrSelectValue, string trainingRunIterations, uint trainingIterationsLeft,
        string msg, Action<ChangeEventArgs> selectOnChange, Action<MouseEventArgs> start, Action<ChangeEventArgs> itersChanged)
    {
        var isInputValid = UInt32.TryParse(trainingRunIterations, out _);
        return @<div class="train-ui-menu">
                   <button class="train-start-button"
                           @onclick="start"
                           disabled="@(!isInputValid)">
                       @(0 < trainingIterationsLeft ?
                           $"{msg} In Progress: {trainingIterationsLeft} left..." :
                           $"Click To Begin {msg}")
                   </button>
                   <select class="train-cfr-player-type"
                           @onchange="selectOnChange">
                       @foreach (var (k,v) in cfr_player_types)
                       {
                           <option value="@k"
                                   selected="@(v.Equals(cfrSelectValue))">
                               @k
                           </option>
                       }
                   </select>
                   <div class="train-label">
                       <pre>Number Of Iterations:  </pre>
                       <input class="train-input"
                              value="@trainingRunIterations"
                              style="@(isInputValid ? "" : "color: red")"
                              @onchange="itersChanged"/>
                   </div>
               </div>;
    }

}